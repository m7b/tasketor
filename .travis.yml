#https://github.com/ainfosec/ci_helloworld

#
# Configuration
#
language: cpp
dist: xenial

#
# Build Dependencies
#
before_script:
- mkdir build
- cd build

#
# Build Matrix
#
matrix:
  include:

  #
  # Build Release
  #
  - os: linux
    env:
      - TEST="Build Release"

    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - libboost-all-dev

    compiler: gcc
    
    install:    
      # first we create a directory for the CMake binaries
      - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
      - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
      # we use wget to fetch the cmake binaries
      - travis_retry wget --no-check-certificate https://cmake.org/files/v3.20/cmake-3.20.0-rc1-linux-x86_64.tar.gz
      # this is optional, but useful:
      # do a quick md5 check to ensure that the archive we downloaded did not get compromised
      - echo "455ff919e07f3afb938abd3c0ee7f234b690699f4980065f6001407995b0e6b4 *cmake-3.20.0-rc1-linux-x86_64.tar.gz" > cmake_sha256.txt
      - sha256sum -c cmake_sha256.txt
      # extract the binaries; the output here is quite lengthy,
      # so we swallow it to not clutter up the travis console
      - tar -xvf cmake-3.20.0-rc1-linux-x86_64.tar.gz > /dev/null
      - mv cmake-3.20.0-rc1-linux-x86_64 cmake-install
      # add both the top-level directory and the bin directory from the archive
      # to the system PATH. By adding it to the front of the path we hide the
      # preinstalled CMake with our own.
      - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
      # don't forget to switch back to the main build directory once you are done
      - cd ${TRAVIS_BUILD_DIR}
    
    script:
      - cmake -DCI_BUILD:BOOL=ON -DCOVERAGE:BOOL=OFF -DCMAKE_BUILD_TYPE=Release ..
      - make

  #
  # Build Debug
  #
  - os: linux
    env:
      - TEST="Build Debug"

    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - libboost-all-dev

    compiler: gcc
    
    script:
      - cmake -DCI_BUILD:BOOL=ON -DCOVERAGE:BOOL=OFF -DCMAKE_BUILD_TYPE=Debug ..
      - make

  #
  # Build Release G++ 8
  #
  - os: linux
    env:
      - TEST="Build Release G++ 8"

    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - g++-8
          - libboost-all-dev

    compiler: gcc
    
    script:
      - export CC=gcc-8
      - export CXX=g++-8
      - cmake -DCI_BUILD:BOOL=ON -DCOVERAGE:BOOL=OFF -DCMAKE_BUILD_TYPE=Release ..
      - make


  #
  # Build Debug G++ 8
  #
  - os: linux
    env:
      - TEST="Build Debug G++ 8"

    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - g++-8
          - libboost-all-dev

    compiler: gcc
    
    script:
      - export CC=gcc-8
      - export CXX=g++-8
      - cmake -DCI_BUILD:BOOL=ON -DCOVERAGE:BOOL=OFF -DCMAKE_BUILD_TYPE=Debug ..
      - make


  #
  # Test coverage
  #
  - os: linux
    env:
      - TEST="Test coverage"

    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - libboost-all-dev

    compiler: gcc
    
    script:
      - pip install --user cpp-coveralls
      - cmake -DCI_BUILD:BOOL=ON -DCOVERAGE:BOOL=ON -DCMAKE_BUILD_TYPE=Debug ..
      - make
      - cd test
      - ctest --verbose

    after_success:
      - cd ..
      - cd ..
      - |
        coveralls --build-root build --gcov-options '\--long-file-names --preserve-paths' \
          -E ".*CMakeFiles.*" \
          -E ".+/config/" \
          -E ".+/lib/" \
          -E ".+/test/"
